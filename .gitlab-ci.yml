image:
  mcr.microsoft.com/dotnet/sdk:6.0

stages:
  - build
  - test
  - trigger
  - package

variables:
  MAKEFILE_PATH: $CI_PROJECT_DIR/build/Makefile
  AVAILABLE_FRAMEWORKS: "net45;netstandard2.0"

workflow:
  rules:
    # Run pipelines triggered from the web UI
    - if: $CI_PIPELINE_SOURCE == "web"
    # Do not run pipelines on *-nocheck branches, even in a MR
    - if: $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME =~ /-nocheck$/
      when: never
    # Run pipelines on MR
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    # Run pipelines only on master branch
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    # Run pipelines on tags
    - if: $CI_COMMIT_TAG


# --- Building & Linting --- #

build_release_sdk_csharp:
  stage: build
  script:
    - dotnet restore
    - dotnet build -c Release
    #   Test that we have the sdk dll for the all expected frameworks
    - ls ./QarnotSDK/bin/Release/
    - |
      IFS=';' read -ra frameworks <<< "$AVAILABLE_FRAMEWORKS"
      for key in "${frameworks[@]}"
      do
        echo "Check if QarnotSDK.dll file exists for framework $key"
        test -e "./QarnotSDK/bin/Release/$key/QarnotSDK.dll" || echo "./QarnotSDK/bin/Release/$key/QarnotSDK.dll not found"
      done

# --- Testing & Coverage --- #

junit_tests_sdk_csharp:
  stage: test
  variables:
    EXTRA_REQUIREMENTS_FILE: requirements-test.txt
  script:
    - dotnet test -c Debug --logger:"junit;LogFilePath=report.xml" QarnotSDK.UnitTests/QarnotSDK.UnitTests.csproj || export EXIT_CODE=$?;
    - export TEST_REPORT_FILE_PATH=$(find QarnotSDK.UnitTests -name "report.xml")
    - echo "$TEST_REPORT_FILE_PATH"
    - cp "$TEST_REPORT_FILE_PATH" report-sdk-csharp-test.xml
    - exit $EXIT_CODE
  artifacts:
    when: always
    expire_in: 1hour
    paths:
      - ./report-sdk-csharp-test.xml
    reports:
      junit: ./report-sdk-csharp-test.xml


# --- Packaging --- #

publish_sdk_csharp:
  stage: package
  rules:
    # Run pipelines on tags
    - if: $CI_COMMIT_TAG
  variables:
    PUBLISH_FOLDER: publish_outputs
  script:
    - |
      IFS=';' read -ra frameworks <<< "$AVAILABLE_FRAMEWORKS"
      for key in "${frameworks[@]}"
      do
        echo "Building SDK for framework $key"
        dotnet publish QarnotSDK -c Release -o ./$PUBLISH_FOLDER/$key -f '$key'
      done
  artifacts:
    paths:
      - $PUBLISH_FOLDER
    expire_in: 1hour


# --- SDK Documentation generation --- #

generate_doc_sdk_csharp:
  stage: package
  script:
    - /bin/bash ./Documentation/build_documentation.sh
  artifacts:
    paths:
      - Documentation/_site
    expire_in: 1hour

