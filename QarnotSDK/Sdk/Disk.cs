using System;
using System.Threading.Tasks;
using System.Threading;
using System.Collections.Generic;
using System.IO;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Security.Cryptography;

namespace QarnotSDK
{
    /// <summary>
    /// Represents an entry (file or folder) in a disk.
    /// </summary>
    public class QDiskEntry : QAbstractStorageEntry {
        /// <summary>
        /// Creation date of this entry.
        /// </summary>
        public DateTime CreationDate { get; protected set; }

        /// <summary>
        /// Computes the digest of a local file and compares it to the digest of this disk entry.
        /// </summary>
        /// <param name="localFilePath">The local file to compare to.</param>
        /// <param name="cancellationToken">A token to cancel the request.</param>
        /// <returns></returns>
        public override async Task<bool> EqualsLocalFileDigestAsync(string localFilePath, CancellationToken cancellationToken = default(CancellationToken)) {
            var readBuffer = new byte[ReadBufferSize];
            SHA1 sha1 = SHA1.Create();
            using (var fs = new FileStream(localFilePath, FileMode.Open, FileAccess.Read)) {
                long fileSize = fs.Length;
                long offset = 0;
                while (true) {
                    // Which size we can read
                    int toRead = ReadBufferSize;
                    // Don't read after the EOF
                    if (toRead > fileSize - offset)
                        toRead = (int)(fileSize - offset);

                    int read = await fs.ReadAsync(readBuffer, 0, toRead);
                    if (read <= 0) throw new IOException(); // Should not happen

                    offset += read;

                    if (offset >= fileSize) {
                        sha1.TransformFinalBlock(readBuffer, 0, read);
                        var hexDigest = BitConverter.ToString(sha1.Hash).Replace("-", "").ToLower();
                        return hexDigest.Equals(Digest);
                    } else {
                        int x = sha1.TransformBlock(readBuffer, 0, read, null, 0);
                        if (x != read)
                            throw new IOException("SHA1 TransformBlock error");
                    }
                }
            }
        }

        internal QDiskEntry(string path, FileApi api) {
            Size = api.Size;
            Name = path == null ? api.Name : (path + api.Name);
            FileFlags = api.FileFlags;
            Digest = api.Sha1sum != null ? api.Sha1sum.ToLower() : "";
            try { CreationDate = DateTime.Parse(api.CreationDate, System.Globalization.CultureInfo.InvariantCulture); } catch { };
        }
    }

    /// <summary>
    /// This class manages the Qarnot disks.
    /// </summary>
    public partial class QDisk : QAbstractStorage {
        private readonly Connection _api;
        private DiskApi _diskApi;
        private string _uri;

        /// <summary>
        /// The disk Uuid.
        /// </summary>
        public override string UniqueId { get { return _diskApi.Uuid.ToString(); } }
        /// <summary>
        /// The inner Connection object.
        /// </summary>
        public override Connection Connection { get { return _api; } }
        /// <summary>
        /// The disk unique identifier. The Uuid is generated by the Api when the disk is created.
        /// </summary>
        public Guid Uuid { get { return _diskApi.Uuid; } }
        /// <summary>
        /// The disk shortname identifier. The shortname is provided by the user. It has to be unique.
        /// </summary>
        public override string Shortname { get { return _api.HasDiskShortnameFeature ? _diskApi.Shortname : _diskApi.Description; } }
        /// <summary>
        /// The disk description.
        /// </summary>
        public string Description { get { return _diskApi.Description; } }
        /// <summary>
        /// Number of files in this disk.
        /// Use Update or UpdateAsync to refresh.
        /// </summary>
        public override int FileCount { get { return _diskApi.FileCount; } }
        /// <summary>
        /// Size of this disk in bytes.
        /// Use Update or UpdateAsync to refresh.
        /// </summary>
        public override long UsedSpaceBytes { get { return _diskApi.UsedSpaceBytes; } }
        /// <summary>
        /// The disk creation date
        /// </summary>
        public override DateTime CreationDate { get { return _diskApi.CreationDate.ToLocalTime(); } }
        /// <summary>
        /// The locked state of this disk, use Lock or LockAsync to lock/unlock the disk
        /// Use Update or UpdateAsync to refresh.
        /// </summary>
        public bool Locked { get { return _diskApi.Locked; } }

        /// <summary>
        /// Create a disk object.
        /// </summary>
        /// <param name="connection">The inner connection object.</param>
        /// <param name="shortname">The disk shortname.</param>
        public QDisk(Connection connection, string shortname, bool create=true) {
            _api = connection;
            _diskApi = new DiskApi();
            _diskApi.Description = shortname;

            if (_api.HasDiskShortnameFeature) {
                _diskApi.Shortname = shortname;
                _uri = "disks/" + shortname;
            }

            if (create)
                this.CreateAsync().Wait();
        }

        /// <summary>
        /// Create a disk object given an existing Uuid.
        /// </summary>
        /// <param name="connection">The inner connection object.</param>
        /// <param name="uuid">The Uuid of an already existing disk.</param>
        public QDisk(Connection connection, Guid uuid) : this(connection, uuid.ToString(), create: false) {
            _uri = "disks/" + uuid.ToString();
        }

        internal QDisk(Connection api, DiskApi diskApi) {
            _api = api;
            _diskApi = diskApi;
            _uri = "disks/" + _diskApi.Uuid.ToString();
        }

        #region workaround
        // Will be removed once the 'shortname' is implemented on the api side
        internal async Task ApiWorkaround_EnsureUriAsync(bool mustExist, CancellationToken cancellationToken) {
            if (_api.HasDiskShortnameFeature) {
                // No workaround needed
                return;
            }

            if (mustExist) {
                // The pool Uri must exist, so if Uri is null, fetch the pool by name
                if (_uri != null) {
                    return;
                }

                var result = await _api.RetrieveDiskByNameAsync(_diskApi.Description, cancellationToken);
                if (result == null) {
                    throw new QarnotApiResourceNotFoundException("disk " + _diskApi.Description + " doesn't exist", null);
                }
                _diskApi.Uuid = result.Uuid;
                _uri = "disks/" + _diskApi.Uuid.ToString();
            } else {
                if (_uri != null) {
                    // We have an Uri, check if it's still valid
                    try {
                        var response = await _api._client.GetAsync(_uri, cancellationToken); // get disk status
                        await Utils.LookForErrorAndThrowAsync(_api._client, response);
                        // no error, the disk still exists
                        throw new QarnotApiResourceAlreadyExistsException("disk " + _diskApi.Description + " already exists", null);
                    } catch (QarnotApiResourceNotFoundException) {
                        // OK, not running
                    }
                } else {
                    // We don't have any Uri, check if the disk name exists
                    var result = await _api.RetrieveDiskByNameAsync(_diskApi.Description, cancellationToken);
                    if (result != null) {
                        throw new QarnotApiResourceAlreadyExistsException("disk " + _diskApi.Description + " already exists", null);
                    }
                }
                _diskApi.Uuid = new Guid();
                _uri = null;
            }
        }
        #endregion

        /// <summary>
        /// Create the disk.
        /// Note: if the disk already exists, no exception is thrown.
        /// </summary>
        /// <param name="cancellationToken">A token to cancel the request.</param>
        /// <returns></returns>
        public override async Task CreateAsync(CancellationToken cancellationToken = default(CancellationToken)) {
            await CreateAsync(true, default(CancellationToken));
        }
        /// <summary>
        /// Create the disk.
        /// </summary>
        /// <param name="dontFailIfExists">If true, no exception is thrown if the disk already exists.</param>
        /// <param name="cancellationToken">A token to cancel the request.</param>
        /// <returns></returns>
        public async Task CreateAsync(bool dontFailIfExists, CancellationToken cancellationToken = default(CancellationToken)) {
            if (dontFailIfExists) {
                // Check if the disk exists and return immediately
                try {
                    await UpdateAsync(cancellationToken);
                    return;
                } catch (QarnotApiResourceNotFoundException) {
                }
            }

            await ApiWorkaround_EnsureUriAsync(false, cancellationToken);

            if (_api.IsReadOnly) throw new Exception("Can't create disks, this connection is configured in read-only mode");
            var response = await _api._client.PostAsJsonAsync<DiskApi>("disks", _diskApi, cancellationToken);
            await Utils.LookForErrorAndThrowAsync(_api._client, response);

            // Update the task Uuid
            var result = await response.Content.ReadAsAsync<DiskApi>(cancellationToken);
            _diskApi.Uuid = result.Uuid;
            _uri = "disks/" + _diskApi.Uuid.ToString();
        }

        /// <summary>
        /// Lock or unlock the disk.
        /// </summary>
        /// <param name="lockState">True to lock the disk, false to unlock it.</param>
        /// <param name="cancellationToken">Optional token to cancel the request.</param>
        /// <returns></returns>
        public async Task LockAsync(bool lockState, CancellationToken cancellationToken = default(CancellationToken)) {
            await ApiWorkaround_EnsureUriAsync(true, cancellationToken);

            if (_api.IsReadOnly) throw new Exception("Can't change disks lock state, this connection is configured in read-only mode");
            var lockApi = new LockApi(lockState);
            var response = await _api._client.PutAsJsonAsync<LockApi>(_uri, lockApi, cancellationToken);
            await Utils.LookForErrorAndThrowAsync(_api._client, response);

            _diskApi.Locked = lockState;
        }

        /// <summary>
        /// Delete the disk.
        /// </summary>
        /// <param name="cancellationToken">Optional token to cancel the request.</param>
        /// <returns></returns>
        public override async Task DeleteAsync(CancellationToken cancellationToken = default(CancellationToken)) {
            await ApiWorkaround_EnsureUriAsync(true, cancellationToken);

            if (_api.IsReadOnly) throw new Exception("Can't delete disks, this connection is configured in read-only mode");
            var response = await _api._client.DeleteAsync(_uri, cancellationToken);
            response.EnsureSuccessStatusCode();
        }

        /// <summary>
        /// Update this disk file count and disk usage.
        /// </summary>
        /// <param name="cancellationToken">Optional token to cancel the request.</param>
        /// <returns></returns>
        public override async Task UpdateAsync(CancellationToken cancellationToken = default(CancellationToken)) {
            await ApiWorkaround_EnsureUriAsync(true, cancellationToken);

            var response = await _api._client.GetAsync(_uri, cancellationToken);
            await Utils.LookForErrorAndThrowAsync(_api._client, response);

            // Retrieve the Uuid from the response and assign it to the DiskApi
            var result = await response.Content.ReadAsAsync<DiskApi>(cancellationToken);
            _diskApi = result;
        }

        #region upload/download
        /// <summary>
        /// Write a stream to a file in this disk.
        /// </summary>
        /// <param name="sourceStream">The source stream.</param>
        /// <param name="remoteFile">The destination file name in this disk.</param>
        /// <param name="cancellationToken">Optional token to cancel the request.</param>
        /// <returns></returns>
        public override async Task UploadStreamAsync(Stream sourceStream, string remoteFile, CancellationToken cancellationToken = default(CancellationToken)) {
            await ApiWorkaround_EnsureUriAsync(true, cancellationToken);

            var requestContent = new MultipartFormDataContent();
            var fileContent = new StreamContent(sourceStream);
            fileContent.Headers.ContentType = MediaTypeHeaderValue.Parse("application/octet-stream");
            fileContent.Headers.ContentDisposition = ContentDispositionHeaderValue.Parse("attachment; filename=\"" + Path.GetFileName(remoteFile) +"\"");
            requestContent.Add(fileContent, Path.GetFileNameWithoutExtension(remoteFile), Path.GetFileName(remoteFile));

            if (_api.IsReadOnly) throw new Exception("Can't upload files, this connection is configured in read-only mode");
            var response = await _api._client.PostAsync(_uri + "/" + Path.GetDirectoryName(remoteFile), requestContent, cancellationToken);
            await Utils.LookForErrorAndThrowAsync(_api._client, response);
        }

        /// <summary>
        /// Get a stream on a file in this disk.
        /// </summary>
        /// <param name="remoteFile">The source file name in this disk.</param>
        /// <param name="cancellationToken">Optional token to cancel the request.</param>
        /// <returns>A stream with the file's data.</returns>
        public override async Task<Stream> DownloadStreamAsync(string remoteFile, CancellationToken cancellationToken = default(CancellationToken)) {
            await ApiWorkaround_EnsureUriAsync(true, cancellationToken);

            string fileUri = _uri + "/" + remoteFile;

            var response = await _api._client.GetAsync(
                fileUri,
                HttpCompletionOption.ResponseHeadersRead);
            await Utils.LookForErrorAndThrowAsync(_api._client, response);

            return await response.Content.ReadAsStreamAsync();
        }

        /// <summary>
        /// Delete a file or folder in this disk.
        /// </summary>
        /// <param name="remotePath">The entry to remove.</param>
        /// <param name="cancellationToken">Optional token to cancel the request.</param>
        /// <returns></returns>
        public override async Task DeleteEntryAsync(string remotePath, CancellationToken cancellationToken = default(CancellationToken)) {
            await ApiWorkaround_EnsureUriAsync(true, cancellationToken);

            if (_api.IsReadOnly) throw new Exception("Can't delete disks, this connection is configured in read-only mode");
            var response = await _api._client.DeleteAsync(_uri + "/" + remotePath, cancellationToken);
            response.EnsureSuccessStatusCode();
        }

        /// <summary>
        /// List the files and folders.
        /// </summary>
        /// <param name="remoteFolder">The folder to list.</param>
        /// <param name="cancellationToken">Optional token to cancel the request.</param>
        /// <returns>A list of QAbstractStorageEntry</returns>
        public override async Task<List<QAbstractStorageEntry>> ListEntriesAsync(string remoteFolder, CancellationToken cancellationToken = default(CancellationToken)) {
            await ApiWorkaround_EnsureUriAsync(true, cancellationToken);

            string treeUri = "disks/list/" + _diskApi.Uuid.ToString() + "/" + remoteFolder;
            var response = await _api._client.GetAsync(treeUri, cancellationToken);

            await Utils.LookForErrorAndThrowAsync(_api._client, response);

            var ret = new List<QAbstractStorageEntry>();
            foreach(var f in await response.Content.ReadAsAsync<List<FileApi>>(cancellationToken)) {
                ret.Add(new QDiskEntry(remoteFolder, f));
            }
            return ret;
        }

        /// <summary>
        /// Return all the entries this disk contains.
        /// </summary>
        /// <param name="cancellationToken">Optional token to cancel the request.</param>
        /// <returns>A list of QAbstractStorageEntry</returns>
        [System.Obsolete("use ListEntriesAsync() instead")]
        public async Task<List<QAbstractStorageEntry>> TreeAsync(CancellationToken cancellationToken = default(CancellationToken)) {
            await ApiWorkaround_EnsureUriAsync(true, cancellationToken);

            string treeUri = "disks/tree/" + _diskApi.Uuid.ToString();
            var response = await _api._client.GetAsync(treeUri, cancellationToken);

            await Utils.LookForErrorAndThrowAsync(_api._client, response);

            var ret = new List<QAbstractStorageEntry>();
            foreach (var f in await response.Content.ReadAsAsync<List<FileApi>>(cancellationToken)) {
                ret.Add(new QDiskEntry(null, f));
            }
            return ret;
        }
        #endregion
    }
}
